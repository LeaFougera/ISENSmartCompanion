package fr.isen.fougera.isensmartcompanion

import android.util.Log
import com.google.ai.client.generativeai.GenerativeModel
import com.google.ai.client.generativeai.type.Content
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

object GeminiAI {
    private const val API_KEY = "AIzaSyBguWA9SSbLDlRrO6e5RZo3WoZkPpEl7as" // ðŸ”‘ Remplace par ta vraie clÃ© API

    private val model = GenerativeModel(
        modelName = "gemini-1.5-flash",
        apiKey = API_KEY
    )

    suspend fun analyzeText(input: String): String {
        return withContext(Dispatchers.IO) {
            try {
                // âœ… VÃ©rification de l'entrÃ©e utilisateur
                if (input.isBlank()) {
                    return@withContext "Veuillez poser une question valide."
                }

                // âœ… Envoi direct du texte Ã  Gemini
                Log.d("GEMINI_REQUEST", "Question envoyÃ©e : $input")
                val response = model.generateContent(input) // âœ… Envoie le texte en `String`

                // âœ… VÃ©rification et rÃ©cupÃ©ration de la rÃ©ponse
                val result = response.text?.trim() ?: "Je n'ai pas compris votre question."
                Log.d("GEMINI_RESPONSE", "RÃ©ponse de l'IA : $result")
                result
            } catch (e: Exception) {
                Log.e("GEMINI_ERROR", "Erreur lors de l'appel Ã  l'IA : ${e.message}")
                "Erreur lors de l'appel Ã  l'IA : ${e.message}"
            }
        }
    }
}