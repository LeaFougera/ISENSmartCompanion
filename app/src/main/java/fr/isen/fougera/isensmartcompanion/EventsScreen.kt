package fr.isen.fougera.isensmartcompanion

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import android.os.Parcelable
import kotlinx.parcelize.Parcelize
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import android.util.Log

@Parcelize
data class Event(
    val id: String,
    val title: String,
    val description: String,
    val date: String,
    val location: String,  // ‚úÖ V√©rifie que ces champs sont bien pr√©sents
    val category: String
) : Parcelable

// Liste fictive d‚Äô√©v√©nements
val fakeEvents = listOf(
    Event("1", "Soir√©e BDE", "Une soir√©e √©tudiante organis√©e par le BDE", "15 Mars 2025", "Salle des f√™tes", "F√™te"),
    Event("2", "Gala ISEN", "Un √©v√©nement de prestige pour les √©tudiants et alumni", "10 Avril 2025", "H√¥tel de Ville", "C√©r√©monie"),
    Event("3", "Journ√©e de Coh√©sion", "Une journ√©e pour d√©couvrir les associations et clubs", "5 Mai 2025", "Campus ISEN", "Association")
)

@Composable
fun EventsScreen(navController: NavController) {
    var eventList by remember { mutableStateOf<List<Event>?>(null) }
    var isLoading by remember { mutableStateOf(true) }
    var errorMessage by remember { mutableStateOf<String?>(null) }

    // R√©cup√©ration des donn√©es via l'API
    LaunchedEffect(Unit) {
        RetrofitInstance.api.getEvents().enqueue(object : Callback<List<Event>> {
            override fun onResponse(call: Call<List<Event>>, response: Response<List<Event>>) {
                if (response.isSuccessful) {
                    eventList = response.body()
                    isLoading = false
                } else {
                    errorMessage = "√âchec du chargement des √©v√©nements"
                    isLoading = false
                }
            }

            override fun onFailure(call: Call<List<Event>>, t: Throwable) {
                errorMessage = "Erreur : ${t.message}"
                isLoading = false
                Log.e("EventsScreen", "√âchec de l'appel API : ${t.message}")
            }
        })
    }

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text(text = "üìÖ √âv√©nements ISEN", fontSize = 24.sp)
        Spacer(modifier = Modifier.height(16.dp))

        when {
            isLoading -> {
                CircularProgressIndicator()
            }
            errorMessage != null -> {
                Text(text = errorMessage!!, color = androidx.compose.ui.graphics.Color.Red)
            }
            eventList.isNullOrEmpty() -> {
                Text(text = "Aucun √©v√©nement trouv√©.", fontSize = 18.sp)
            }
            else -> {
                LazyColumn {
                    items(eventList!!) { event ->
                        EventItem(event, navController)
                    }
                }
            }
        }
    }
}

@Composable
fun EventItem(event: Event, navController: NavController) { // ‚úÖ Accepte `navController`
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable { navController.navigate("eventDetail/${event.id}") }, // ‚úÖ Navigue vers les d√©tails
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = event.title, fontSize = 20.sp, fontWeight = androidx.compose.ui.text.font.FontWeight.Bold)
            Spacer(modifier = Modifier.height(4.dp))
            Text(text = event.description)
            Spacer(modifier = Modifier.height(4.dp))
            Text(text = "üìÖ ${event.date}", fontSize = 14.sp, color = androidx.compose.ui.graphics.Color.Gray)
        }
    }
}